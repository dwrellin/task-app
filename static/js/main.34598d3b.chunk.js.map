{"version":3,"sources":["constants/actionTypes.js","actions/index.js","App.js","reducers/tasks.js","reducers/index.js","reportWebVitals.js","index.js"],"names":["POST","DELETE","COMPLETE","postTask","data","type","payload","initialTaskState","taskId","taskDesc","isCompleted","App","useState","task","setTask","greeting","setGreeting","displayTask","useSelector","state","dispatch","useDispatch","useEffect","currentHour","Date","getHours","className","Helmet","placeholder","onChange","e","target","value","onKeyUp","key","onClick","map","index","style","minHeight","id","toggleState","checked","htmlFor","taskReducer","action","filter","allReducers","combineReducers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34598d3b.chunk.js","sourcesContent":["export const POST = 'POST';\r\nexport const DELETE = 'DELETE';\r\nexport const COMPLETE = 'COMPLETE';","import { COMPLETE, DELETE, POST } from '../constants/actionTypes';\r\n\r\nexport const postTask = data => {\r\n  return {\r\n    type: POST,\r\n    payload: data\r\n  }\r\n}\r\n\r\nexport const removeTask = data => {\r\n  return {\r\n    type: DELETE,\r\n    task: data\r\n  }\r\n}\r\n\r\nexport const completeTask = (id, data, toggleState) => {\r\n  return {\r\n    type: COMPLETE,\r\n    task: {\r\n      ...data,\r\n      taskId: id,\r\n      isCompleted: toggleState\r\n    }\r\n  }\r\n}","import { useEffect, useState } from 'react';\nimport Helmet from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { completeTask, postTask, removeTask } from './actions';\n\nconst initialTaskState = {\n  taskId: 0,\n  taskDesc: '',\n  isCompleted: false\n};\n\nfunction App() {\n  const [task, setTask] = useState({\n    taskId: 0,\n    taskDesc: '',\n    isCompleted: false\n  });\n  const [greeting, setGreeting] = useState('');\n  // access/get postedTask array from store\n  const displayTask = useSelector(state => state.postTask);\n  // used to trigger an action -> structure/sample syntax: dispatch(<action>)\n  const dispatch = useDispatch();\n  \n  useEffect(() => {\n    let today = new Date()\n    let currentHour = today.getHours()\n    \n    if (currentHour < 12) {\n      setGreeting('Good morning');\n    } else if (currentHour < 18) {\n      setGreeting('Good afternoon');\n    } else {\n      setGreeting('Good evening');\n    };\n  }, [greeting]);\n\n  return (\n    <div className='bg-gray-200 min-h-screen font-mono flex'>\n      <Helmet>\n        <title>Simple Task App</title>\n      </Helmet>\n      <div className=\"max-w-screen-md m-auto\">\n        <h1 className='text-5xl antialiased mb-3'>{greeting}, human!</h1>\n        <p className='text-2xl'>What are you up to?</p>\n\n        <div className='flex my-10'>\n          <input \n            type='text' \n            className='p-2 px-5 w-full rounded rounded-r-none' \n            placeholder='Got bored, made a task app'\n            onChange={(e) => {\n              setTask({ \n                ...task,\n                taskDesc: e.target.value \n              })\n            }} \n            onKeyUp={(e) => {\n              if (!task) return;\n              if (e.key === 'Enter') {\n                dispatch(postTask(task));\n                setTask({\n                  ...initialTaskState,\n                  taskId: task.taskId + 1\n                });\n              }\n            }}\n            value={task.taskDesc}\n          />\n          \n          <button \n            className='bg-white p-2 px-5 text-3xl rounded rounded-l-none'\n            onClick={() => {\n              if (!task) return;\n              dispatch(postTask(task));\n              setTask({\n                ...initialTaskState,\n                taskId: task.taskId + 1\n              })\n            }}>\n              +\n          </button>\n        </div>\n\n        {displayTask && (\n          <ul>\n            {displayTask.map((task, index) => (\n              <>\n                <li key={index} className='p-3 pl-4 bg-gray-50 rounded flex justify-between items-center mb-2' style={{ minHeight: 52 }}>\n                  <div className='flex flex-grow mr-3 items-center'>\n                    <input \n                      id={index}\n                      type='checkbox' \n                      className='mr-3' \n                      onChange={(e) => {\n                        dispatch(completeTask(index, task, e.target.checked));\n                      }}\n                    />\n\n                    <label\n                      htmlFor={index}\n                      className={`flex-grow cursor-pointer ${task.isCompleted ? 'line-through text-gray-400' : ''}`}\n                    >\n                        {task.taskDesc}\n                    </label>\n                  </div>\n\n                  {!task.isCompleted && (\n                    <button \n                      className='p-1 px-3 bg-red-500 rounded text-white text-sm font-bold'\n                      onClick={() => dispatch(removeTask(task))}>\n                        x\n                    </button>\n                  )}\n                </li>\n              </>\n            ))}\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { COMPLETE, DELETE, POST } from '../constants/actionTypes';\r\n\r\nconst taskReducer = (state = [], action) => {\r\n  switch(action.type) {\r\n    case POST:\r\n      return [...state, action.payload]\r\n\r\n    case DELETE:\r\n      return state.filter(task => task !== action.task)\r\n\r\n    case COMPLETE:\r\n      return state.map(task => task.taskId === action.task.taskId ? action.task : task);\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default taskReducer;","import { combineReducers } from 'redux';\r\nimport taskReducer from './tasks';\r\n\r\nconst allReducers = combineReducers({\r\n  postTask: taskReducer\r\n})\r\n\r\nexport default allReducers;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport App from './App';\nimport './index.css';\nimport allReducers from './reducers';\nimport reportWebVitals from './reportWebVitals';\n\nconst store = createStore(\n  allReducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}